{"file":"urunler-CbxKEpHp.js","mappings":";;;;;;;;;;;;;;;;;;;AAmIA,UAAM,WAAW,IAAI,CAAA,CAAE;AACvB,UAAM,aAAa,IAAI,EAAE,eAAe,IAAI,WAAW,IAAI,aAAa,IAAI,YAAY,GAAI,CAAA;AAC5F,UAAM,iBAAiB,IAAI,EAAE;AAC7B,UAAM,oBAAoB,IAAI,IAAI;AACV,QAAI,KAAK;AACC,QAAI,KAAK;AACnB,QAAI,IAAI;AACV,QAAI,IAAI;AAC9B,UAAM,mBAAmB,IAAI,CAAC;AACN,QAAI,IAAI;AAChC,UAAM,cAAc,IAAI,EAAE;AAC1B,UAAM,eAAe,IAAI,EAAE;AAC3B,UAAM,cAAc,IAAI,CAAC;AACP,QAAI,KAAK;AACN,QAAI,EAAE;AACH,QAAI,EAAE;AAU9B,UAAM,mBAAmB,SAAS,MAAM;AACtC,aAAO,SAAS,MAAM,OAAO,aAAW;;AACtC,cAAM,SAAS,YAAY,MAAM,YAAW;AAE5C,iBACE,wCAAS,kBAAT,mBAAwB,cAAc,SAAS,cAC/C,wCAAS,cAAT,mBAAoB,cAAc,SAAS,cAC3C,wCAAS,sBAAT,mBAA4B,cAAc,SAAS,cACnD,wCAAS,gBAAT,mBAAsB,WAAW,cAAc,SAAS;AAAA,MAE9D,CAAG;AAAA,IACH,CAAC;AAGD,UAAM,oBAAoB,SAAS,MAAM;AACvC,YAAM,QAAQ;AACd,YAAM,MAAM,YAAY,QAAQ,aAAa;AAC7C,aAAO,iBAAiB,MAAM,MAAM,OAAO,GAAG;AAAA,IAChD,CAAC;AAGD,UAAM,kBAAkB,SAAS,MAAM;AACrC,aAAO,YAAY,QAAQ,aAAa,QAAQ,iBAAiB,MAAM;AAAA,IACzE,CAAC;AAED,UAAM,kBAAkB,SAAS,MAAM;AACrC,aAAO,YAAY,UAAU;AAAA,IAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/urunler.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Ürünler</h1>\n\n    <!-- Confirmation Modal for Deletion -->\n    <ClientOnly>\n      <ConfirmationModal \n        v-if=\"showDeleteModal\" \n        :showModal=\"showDeleteModal\" \n        title=\"Ürünü Sil\" \n        message=\"Bu ürünü silmek istediğinize emin misiniz?\"\n        @confirm=\"deleteProduct\"\n        @cancel=\"cancelDelete\"\n      />\n    </ClientOnly>\n\n    <!-- Confirmation Modal for Deletion -->\n    <ClientOnly>\n      <ConfirmationModal \n        v-if=\"showProductStockEditModal\" \n        :showModal=\"showProductStockEditModal\" \n        title=\"Ürün stock degisikligi\" \n        message=\"Bu ürünün stogunu degistirmek istediginize emin misiniz?\"\n        @confirm=\"editStock\"\n        @cancel=\"cancelStockEdit\"\n      />\n    </ClientOnly>\n\n    <!-- Add New Product Section -->\n    <div class=\"add-product-section\">\n      <h3>Yeni Ürün Ekle</h3>\n      <input v-model=\"newProduct.ürün_numarasi\" placeholder=\"Ürün numarasi\" />\n      <input v-model=\"newProduct.ürün_ismi\" placeholder=\"Ürün ismi\" />\n      <input v-model=\"newProduct.ürün_fiyati\" placeholder=\"Ürün fiyati\"/>\n      <input v-model=\"newProduct.ürün_adedi\" placeholder=\"Ürün adedi\"/>\n      <button @click=\"addProduct\">Ürün Ekle</button>\n    </div>\n\n    <!-- Feedback message for successful product creation -->\n    <p v-if=\"successMessage\" class=\"success-message\">{{ successMessage }}</p>\n\n    <h3>Ürün Listesi</h3>\n\n    <!-- Search products -->\n    <input \n      v-model=\"searchQuery\" \n      placeholder=\"Ürün numarasi, Ürün Adı, Ürün fiyiti, kayit tarihi ara\"\n      @keyup.enter=\"submitSearch\"\n      class=\"search-input\"\n    />\n    <table>\n      <thead>\n        <tr>\n          <th>Kayitli ürün listesi ({{ products.length }} kayitli ürün bulunmaktadır) - Filtrelenen ürün sayısı: {{ filteredProducts.length }}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <template v-for=\"(product, index) in paginatedProducts\" :key=\"index\">\n          <tr @click=\"toggleDetails(product.ürün_numarasi)\">\n            <td class=\"table-row\" title=\"Ürün bilgilerini göstermek için tıkla\">\n              <div class=\"arrow-wrapper\">\n                <span class=\"row-element-first arrow\">{{ expandedProductId === product.ürün_numarasi ? '↑' : '↓' }}</span>\n              </div>\n              <span class=\"row-element\">Ürün numarasi: {{ product.ürün_numarasi }}</span>\n              <span class=\"row-element\">{{ product.ürün_ismi }}</span>\n              <span class=\"row-element\">TL: {{ product.ürün_fiyati }}</span>\n              <span class=\"row-element\">Stok: {{ product.ürün_adedi }}</span>\n              <button class=\"row-element row-element-last remove-button\" @click.stop=\"confirmDelete(product.ürün_numarasi)\">Ürünü Sil</button>\n            </td>\n          </tr>\n          <tr v-if=\"expandedProductId === product.ürün_numarasi\" class=\"details-row\">\n            <td colspan=\"1\">\n              <!-- Display additional product details here -->\n              <div>\n                <p><strong>Ürün Adı:</strong> {{ product.ürün_ismi }}</p>\n                <p><strong>Fiyat:</strong> {{ product.ürün_fiyati }} TL</p>\n                <p><strong>Stok Miktarı:</strong> {{ product.ürün_adedi }}</p>\n                <p><strong>Kayıt Tarihi:</strong> {{ product.ürün_kayit_tarihi }}</p>\n\n                <!-- Input fields to add and decrease stock -->\n                <span>Ürün stogunu düzenle: </span>\n                <div class=\"stock-adjustment\">\n                  <input\n                   type=\"number\"\n                   v-model.number=\"productEditCount\"\n                  placeholder=\"Miktar\"\n                  min=\"1\"\n                  class=\"stock-input\"\n                />\n                  <button @click=\"increaseStock(product.ürün_numarasi)\" class=\"stock-button\">Ürün stogunu artır</button>\n                  <button @click=\"decreaseStock(product.ürün_numarasi)\" class=\"stock-button\">Ürün stogune azalt</button>\n                </div>\n              </div>\n            </td>\n          </tr>\n        </template>\n      </tbody>\n    </table>\n\n    <!-- Load More Button -->\n    <div class=\"buttons\">\n      <div>\n        <button \n          v-if=\"hasMoreProducts\" \n          @click=\"loadMore\" \n          class=\"load-more-btn\"\n        >\n          Daha fazla ürün göster\n        </button>\n\n        <button \n          v-if=\"hasLessProducts\" \n          @click=\"loadLess\" \n          class=\"load-less-btn\"\n        >\n          Daha az ürün göster\n        </button>\n      </div>\n    </div>\n\n    <ClientOnly>\n      <ErrorModal v-if=\"showError\" :showModal=\"showError\" :errorMessage=\"errorMessage\" @close=\"closeErrorModal\" />\n    </ClientOnly>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport ErrorModal from '~/components/ErrorModal.vue';\nimport ConfirmationModal from '~/components/ConfirmationModal.vue';\n\nconst products = ref([]);\nconst newProduct = ref({ ürün_numarasi: '', ürün_ismi: '', ürün_fiyati: '', ürün_adedi: '' });\nconst successMessage = ref('');\nconst expandedProductId = ref(null);\nconst showDeleteModal = ref(false);\nconst showProductStockEditModal = ref(false);\nconst stockEditAction = ref(null);\nconst productToEdit = ref(null);\nconst productEditCount = ref(0);\nconst productToDelete = ref(null);\nconst searchQuery = ref('');\nconst itemsPerPage = ref(10);\nconst currentPage = ref(1);\nconst showError = ref(false);\nconst errorMessage = ref('');\nconst stockAdjustment = ref([]); // To hold stock adjustment input values\n\nconst toggleDetails = (ürün_numarasi) => {\n  expandedProductId.value = expandedProductId.value === ürün_numarasi ? null : ürün_numarasi;\n};\n\nconst closeErrorModal = () => {\n  showError.value = false;\n};\n\nconst filteredProducts = computed(() => {\n  return products.value.filter(product => {\n    const search = searchQuery.value.toLowerCase();\n\n    return (\n      product?.ürün_numarasi?.toLowerCase().includes(search) ||\n      product?.ürün_ismi?.toLowerCase().includes(search) ||\n      product?.ürün_kayit_tarihi?.toLowerCase().includes(search) ||\n      product?.ürün_fiyati?.toString().toLowerCase().includes(search)\n    );\n  });\n});\n\n// Paginated products\nconst paginatedProducts = computed(() => {\n  const start = 0;\n  const end = currentPage.value * itemsPerPage.value;\n  return filteredProducts.value.slice(start, end);\n});\n\n// Check if there are more products to load\nconst hasMoreProducts = computed(() => {\n  return currentPage.value * itemsPerPage.value < filteredProducts.value.length;\n});\n\nconst hasLessProducts = computed(() => {\n  return currentPage.value !== 1;\n});\n\n// Function to load more products\nconst loadMore = () => {\n  currentPage.value++;\n};\n\nconst loadLess = () => {\n  currentPage.value--;\n};\n\n// Function to format the current date as \"YYYY-MM-DD\"\nconst getCurrentDate = () => {\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = String(today.getMonth() + 1).padStart(2, '0');\n  const day = String(today.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\n// Function to save the updated products array to products.json\nconst saveToDatabase = async () => {\n  try {\n    await $fetch('/api/parts', {\n      method: 'POST',\n      body: products.value,\n    });\n  } catch (error) {\n    showError.value = true;\n    errorMessage.value = 'Veritabanı güncellenemedi';\n  }\n};\n\n// Function to add a new product\nconst addProduct = async () => {\n  // Validate input fields\n  if (!newProduct.value.ürün_numarasi || !newProduct.value.ürün_ismi || !newProduct.value.ürün_fiyati || !newProduct.value.ürün_adedi) {\n    showError.value = true;\n    errorMessage.value = 'Lütfen tüm alanları doldurun';\n    return;\n  }\n\n  if (products.value.some((product) => product.ürün_numarasi === newProduct.value.ürün_numarasi)) {\n    showError.value = true;\n    errorMessage.value = 'Bu ürün numarasi kullanilmaktadir ' + newProduct.value.ürün_numarasi + '. Kullanilmayan bir ürün numarasi girin.';\n    return;\n  }\n\n  console.log(\"getCurrentDate(): \", getCurrentDate())\n\n  // Add new product to the list\n  products.value.unshift({ \n    ürün_numarasi: newProduct.value.ürün_numarasi,\n    ürün_ismi: newProduct.value.ürün_ismi,\n    ürün_fiyati: parseFloat(newProduct.value.ürün_fiyati).toFixed(2),\n    ürün_adedi: parseInt(newProduct.value.ürün_adedi, 10), \n    ürün_kayit_tarihi: getCurrentDate()\n  });\n\n  console.log(\"prodocuts: \", products.value[0]);\n\n  // Save to products.json\n  await saveToDatabase();\n\n  // Show success message\n  successMessage.value = 'Yeni ürün (Ürün numarasi: ' + newProduct.value.ürün_numarasi +') başarıyla eklendi ve kaydedildi!';\n\n  // Remove the message after a delay (e.g., 3 seconds)\n  setTimeout(() => {\n    successMessage.value = '';\n  }, 60000);\n\n  // Clear the input fields\n  newProduct.value = { ürün_numarasi: '', ürün_ismi: '', ürün_fiyati: '', ürün_adedi: '' };\n};\n\n// Trigger the modal for confirmation\nconst confirmDelete = (ürün_numarasi) => {\n  productToDelete.value = ürün_numarasi;\n  showDeleteModal.value = true;\n};\n\n// Function to cancel deletion\nconst cancelDelete = () => {\n  showDeleteModal.value = false;\n  productToDelete.value = null;\n};\n\n// Trigger the modal for confirmation\nconst editStock = () => {\n  const editingProduct = products.value.find(product => product.ürün_numarasi === productToEdit.value);\n\n  // If the product doesn't exist, return early\n  if (!editingProduct) {\n    return;\n  }\n\n  const { ürün_adedi } = editingProduct; // Destructure for clarity\n  const count = productEditCount.value;\n\n  if (stockEditAction.value === 'increase') {\n    editingProduct.ürün_adedi += count; // Increase stock\n  } else if (stockEditAction.value === 'decrease') {\n    editingProduct.ürün_adedi = Math.max(0, ürün_adedi - count); // Decrease stock, ensuring it doesn't go below 0\n  }\n\n  saveToDatabase();\n  showProductStockEditModal.value = false;\n};\n\n\n// Function to cancel deletion\nconst cancelStockEdit = () => {\n  showDeleteModal.value = false;\n  productToEdit.value = null;\n};\n\n// Function to delete the product\nconst deleteProduct = () => {\n  products.value = products.value.filter(product => product.ürün_numarasi !== productToDelete.value);\n  showDeleteModal.value = false;\n  productToDelete.value = null;\n  saveToDatabase(); // Save the updated list to the database\n};\n\nconst increaseStock = (ürün_numarasi) => {\n  productToEdit.value = ürün_numarasi;\n  showProductStockEditModal.value = true;\n  stockEditAction.value = \"increase\";\n};\n\nconst decreaseStock = (ürün_numarasi) => {\n  productToEdit.value = ürün_numarasi;\n  showProductStockEditModal.value = true;\n  stockEditAction.value = \"decrease\";\n};\n\nonMounted(async () => {\n  try {\n    const productsResponse = await fetch('/api/parts');\n\n    if (productsResponse.ok) {\n      products.value = await productsResponse.json();\n\n      products.value.sort((a, b) => {\n        return a.ürün_numarasi - b.ürün_numarasi;\n      });\n    }\n  } catch (error) {\n    showError.value = true;\n    errorMessage.value = 'Ürün verileri yüklenemedi.';\n  }\n});\n</script>\n\n<style scoped>\n.add-product-section {\n  margin-bottom: 20px;\n}\n\n.add-product-section input {\n  margin: 5px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.remove-button,\n.add-product-section button {\n  padding: 10px 20px;\n  background-color: green;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.remove-button,\n.add-product-section button:hover {\n  background-color: darkgreen;\n}\n\n.success-message {\n  color: green;\n  font-weight: bold;\n  margin-top: 10px;\n}\n\n.search-input {\n  width: 100%;\n  padding: 12px 20px;\n  margin: 10px 0;\n  box-sizing: border-box;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  background-color: #f8f8f8;\n  font-size: 16px;\n  transition: border-color 0.3s ease, box-shadow 0.3s ease;\n}\n\n.search-input:focus {\n  border-color: #4a90e2;\n  box-shadow: 0 0 5px rgba(74, 144, 226, 0.5);\n}\n\ntbody tr {\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\ntbody tr:hover {\n  background-color: rgb(95, 130, 19);\n  color: white;\n}\n\n.table-row {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 50px;\n  height: 50px;\n}\n\n.row-element {\n  width: 150px;\n}\n\n.row-element-last {\n  width: 200px;\n  margin-left: auto;\n}\n\n.details-row {\n  background-color: #f9f9f9;\n}\n\n.buttons {\n  width: auto;\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  justify-content: center;\n}\n\n.arrow {\n  font-weight: bold;  /* Make the arrow bold */\n}\n\n.arrow-wrapper {\n  background-color: #007BFF;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50px;\n  height: 50px;\n  border: 1px solid black;\n  border-radius: 4px;\n}\n\n.load-more-btn {\n  margin: 15px auto;\n  padding: 10px 20px;\n  margin-right: 20px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n.load-more-btn:hover {\n  background-color: #0056b3;\n}\n\n.load-less-btn {\n  margin: 15px auto;\n  padding: 10px 20px;\n  margin-right: 20px;\n  background-color: #20b1c4;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\n.load-less-btn:hover {\n  background-color: #0056b3;\n}\n\n.stock-adjustment {\n  display: flex;\n  align-items: center;\n  gap: 10px; /* Space between elements */\n  margin-top: 10px; /* Space above the stock adjustment section */\n}\n\n.stock-input {\n  width: 80px; /* Width of the input field */\n  padding: 5px; /* Padding inside the input field */\n  border: 1px solid #ccc; /* Border style */\n  border-radius: 4px; /* Rounded corners */\n  font-size: 16px; /* Font size */\n}\n\n.stock-button {\n  padding: 6px 12px; /* Padding for the buttons */\n  background-color: #4CAF50; /* Green background color */\n  color: white; /* White text color */\n  border: none; /* Remove border */\n  border-radius: 4px; /* Rounded corners */\n  cursor: pointer; /* Pointer cursor on hover */\n  transition: background-color 0.3s; /* Smooth background color transition */\n}\n\n.stock-button:hover {\n  background-color: #45a049; /* Darker green on hover */\n}\n\n.row-element {\n  margin-right: 10px; /* Space between row elements */\n}\n</style>\n"],"version":3}